/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   arc-request-logic.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../events-target-behavior/events-target-behavior.d.ts" />
/// <reference path="../variables-evaluator/variables-evaluator.d.ts" />

declare namespace ApiElements {

  /**
   * `arc-request-logic`
   *
   * A request logic for Advanced REST Client excluding HTTP transport.
   *
   * ## Styling
   *
   * `<arc-request-logic>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--arc-request-logic` | Mixin applied to this elment | `{}`
   */
  class ArcRequestLogic extends Polymer.Element {
    readonly evalElement: any;

    /**
     * Number of milliseconds after which the `before-request` event handlers
     * will be cancelled and the request continue without waiting for the
     * result. When set to `0`, `null`, `undefined` or `false` the timeoout
     * is not applied and the element waits with the request until
     * `continue-request` event is fired.
     */
    handlersTimeout: number|null|undefined;

    /**
     * A map of currently handled requests.
     * Keys are requests IDs generated in the request editor.
     */
    _queue: object|null;
    _attachListeners(node: any): void;
    _detachListeners(node: any): void;

    /**
     * A handler for the `api-request` event. It processes the request
     * and sends it to the transport library.
     */
    _apiRequestHandler(e: CustomEvent|null): void;

    /**
     * Processes the request by executing request actions and evaluating
     * variables. When ready it sends the request to the transport.
     *
     * @param request ARC request object
     */
    processRequest(request: object|null): Promise<any>|null;

    /**
     * Prepares a request object to be used to send it with the `before-request`
     * event. This is a "shallow" copy of the `request` property. It only creates
     * a copy of the primitive values of the object. If the `payload` is an
     * object (`FormData` or `File`) then it will be passed by reference instead
     * of copying the object.
     *
     * It adds `promises` property to the object that is required by the
     * `before-request` event.
     *
     * @param request ARC request object
     * @returns Copy of the `request` property.
     */
    _prepareEventRequest(request: object|null): object|null;

    /**
     * Before the request object can be sent to any `before-request` handler
     * it must be first evaluated by variables evaluator. It is the only way to
     * ensure that the handler will receive actuall request data.
     *
     * @param request ARC request object
     */
    _beforeProcessVariables(request: object|null): Promise<any>|null;

    /**
     * Prepares scripts context override values for variables evaluator.
     * If there are actions defined for the `beforeRequest` key then it will
     * get list of variables and create the override object.
     *
     * @param request ARC request object
     * @returns Promise resolved to an object of variables
     * or undefined if actions not defined.
     */
    _preparePreRequestVariables(request: object|null): Promise<any>|null;

    /**
     * Notifies
     *
     * @param obj [description]
     * @returns [description]
     */
    _notifyVariablesChange(obj: any): any;

    /**
     * Handles the before request logic.
     *
     * @param request The request object.
     */
    _beforeRequest(request: object|null): any;
    _reportError(id: any, cause: any): void;

    /**
     * Computes timeout for the before-request event handlers.
     * It reads a `timeout` property from a promise. If set, it returns a highest
     * value for the timeout or default value defined in the `handlersTimeout`
     * property. If `handlersTimeout` is falsy or any timeout property equals
     * zero (`0`) then this function returns -1 meaning no timeout.
     *
     * @param promises Array of promises returned by the handlers.
     * @returns -1 for no timeout or positive number of milliseconds
     * for the `before-request` event to be handled by all handlers.
     */
    _computeHandlersTimeout(promises: any[]|null): Number|null;

    /**
     * Clears the before-request timeout timer.
     *
     * @param id Request ID
     */
    _clearBeforeRequestTimeout(id: String|null): void;

    /**
     * Called when the `before-request` timeout fired.
     * It continues the request with current values in the `_requestCopy`
     * property that has been sent with the `before-request` event.
     *
     * @param id Request ID
     */
    _onBeforeRequestTimeout(id: String|null): void;

    /**
     * Handler for `continue-request` custom event.
     *
     * @param e [description]
     * @returns [description]
     */
    _continueRequestHandler(e: any): any;

    /**
     * It continues the request flow if all promises for the `before-request`
     * has been resolved.
     * It do nothing if current request doesn't expect this event to be handled
     * (no timeout set to 0).
     *
     * @param request ARC request object
     */
    continueRequest(request: object|null): void;

    /**
     * Called when before request block finished (whatever the output) and the
     * request can now be send to the transport library.
     *
     * @param request The request object
     */
    _continueRequest(request: object|null): void;

    /**
     * Creates an immutable request data object to be send to the transport
     * library.
     *
     * @returns Immutable request object.
     */
    _prepareTransportObject(request: any): object|null;

    /**
     * Handler for `resend-auth-request` custom event to resend the request
     * when needed.
     */
    _resendHandler(e: CustomEvent|null): void;
    _reportHandler(e: any): void;
    _reportResponse(request: any, arcResponse: any): any;

    /**
     * Executes response action before displaying the results.
     *
     * @param actions list of actions to execute
     */
    _processResponseActions(actions: any[]|null, request: Request|null, response: Response|null): any;
    _reportCancelation(reason: any): void;
  }
}

interface HTMLElementTagNameMap {
  "arc-request-logic": ApiElements.ArcRequestLogic;
}
