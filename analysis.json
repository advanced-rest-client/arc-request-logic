{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`arc-request-logic`\n\nA request logic for Advanced REST Client excluding HTTP transport.\n\n## Styling\n\n`<arc-request-logic>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--arc-request-logic` | Mixin applied to this elment | `{}`",
      "summary": "",
      "path": "arc-request-logic.html",
      "properties": [
        {
          "name": "evalElement",
          "type": "Element",
          "description": "Returns a reference to the `variables-evaluator` element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 2
            },
            "end": {
              "line": 89,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "handlersTimeout",
          "type": "number | null | undefined",
          "description": "Number of milliseconds after which the `before-request` event handlers\nwill be cancelled and the request continue without waiting for the\nresult. When set to `0`, `null`, `undefined` or `false` the timeoout\nis not applied and the element waits with the request until\n`continue-request` event is fired.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "2000"
        },
        {
          "name": "variablesDisabled",
          "type": "boolean | null | undefined",
          "description": "When set variables parsing is not performed.\nActions are eqecuted even when this is set.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_queue",
          "type": "Object",
          "description": "A map of currently handled requests.\nKeys are requests IDs generated in the request editor.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 2
            },
            "end": {
              "line": 104,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_apiRequestHandler",
          "description": "A handler for the `api-request` event. It processes the request\nand sends it to the transport library.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 2
            },
            "end": {
              "line": 126,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reportUrlHistory",
          "description": "Dispatches `url-history-store` custom event which is a part of request logic\nto store URL history.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 2
            },
            "end": {
              "line": 144,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "Request URL"
            }
          ],
          "return": {
            "type": "CustomEvent",
            "desc": "Disaptched event"
          }
        },
        {
          "name": "processRequest",
          "description": "Processes the request by executing request actions and evaluating\nvariables. When ready it sends the request to the transport.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_prepareEventRequest",
          "description": "Prepares a request object to be used to send it with the `before-request`\nevent. This is a \"shallow\" copy of the `request` property. It only creates\na copy of the primitive values of the object. If the `payload` is an\nobject (`FormData` or `File`) then it will be passed by reference instead\nof copying the object.\n\nIt adds `promises` property to the object that is required by the\n`before-request` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 176,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Copy of the `request` property."
          }
        },
        {
          "name": "_beforeProcessVariables",
          "description": "Before the request object can be sent to any `before-request` handler\nit must be first evaluated by variables evaluator. It is the only way to\nensure that the handler will receive actuall request data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 2
            },
            "end": {
              "line": 196,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_preparePreRequestVariables",
          "description": "Prepares scripts context override values for variables evaluator.\nIf there are actions defined for the `beforeRequest` key then it will\nget list of variables and create the override object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 2
            },
            "end": {
              "line": 224,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to an object of variables\nor undefined if actions not defined."
          }
        },
        {
          "name": "_notifyVariablesChange",
          "description": "Notifies listeners when variable update action changes",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 2
            },
            "end": {
              "line": 244,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "Map of variables to update"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dispatchBeforeRequest",
          "description": "Dispatches `before-request` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 2
            },
            "end": {
              "line": 259,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object after variables evaluation."
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_beforeRequest",
          "description": "Handles the before request logic.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 2
            },
            "end": {
              "line": 303,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object after variables evaluation."
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_disaptchResponse",
          "description": "Dispatches `api-response` event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 2
            },
            "end": {
              "line": 317,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "detail",
              "type": "Object",
              "description": "The detail object with ARC's `api-response` object."
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_reportError",
          "description": "Common function to report error in the process.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 2
            },
            "end": {
              "line": 336,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request original ID."
            },
            {
              "name": "cause",
              "type": "Error",
              "description": "An error object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeHandlersTimeout",
          "description": "Computes timeout for the before-request event handlers.\nIt reads a `timeout` property from a promise. If set, it returns a highest\nvalue for the timeout or default value defined in the `handlersTimeout`\nproperty. If `handlersTimeout` is falsy or any timeout property equals\nzero (`0`) then this function returns -1 meaning no timeout.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 2
            },
            "end": {
              "line": 370,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "promises",
              "type": "Array",
              "description": "Array of promises returned by the handlers."
            }
          ],
          "return": {
            "type": "Number",
            "desc": "-1 for no timeout or positive number of milliseconds\nfor the `before-request` event to be handled by all handlers."
          }
        },
        {
          "name": "_clearBeforeRequestTimeout",
          "description": "Clears the before-request timeout timer.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 2
            },
            "end": {
              "line": 380,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onBeforeRequestTimeout",
          "description": "Called when the `before-request` timeout fired.\nIt continues the request with current values in the `_requestCopy`\nproperty that has been sent with the `before-request` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 2
            },
            "end": {
              "line": 393,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_continueRequestHandler",
          "description": "Handler for `continue-request` custom event.\nCalls `continueRequest()` function.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 399,
              "column": 2
            },
            "end": {
              "line": 405,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "continueRequest",
          "description": "It continues the request flow if all promises for the `before-request`\nhas been resolved.\nIt do nothing if current request doesn't expect this event to be handled\n(no timeout set to 0).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 414,
              "column": 2
            },
            "end": {
              "line": 423,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_continueRequest",
          "description": "Called when before request block finished (whatever the output) and the\nrequest can now be send to the transport library.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 2
            },
            "end": {
              "line": 450,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "The request object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_prepareTransportObject",
          "description": "Creates an immutable request data object to be send to the transport\nlibrary.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 457,
              "column": 2
            },
            "end": {
              "line": 467,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "Request object."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Immutable request object."
          }
        },
        {
          "name": "_resendHandler",
          "description": "Handler for `resend-auth-request` custom event to resend the request\nwhen needed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 473,
              "column": 2
            },
            "end": {
              "line": 479,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reportHandler",
          "description": "Handler for `report-response` event dispatched by the transport library.\nReports the response using ARC events API and cleans data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 485,
              "column": 2
            },
            "end": {
              "line": 492,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reportResponse",
          "description": "Handles response actions if any and dispatches `api-response` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 499,
              "column": 2
            },
            "end": {
              "line": 512,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ArcRequest object"
            },
            {
              "name": "arcResponse",
              "type": "Object",
              "description": "ArcResponse object"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_processResponseActions",
          "description": "Executes response action before displaying the results.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 521,
              "column": 2
            },
            "end": {
              "line": 537,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "actions",
              "type": "Array",
              "description": "list of actions to execute"
            },
            {
              "name": "request",
              "type": "Request"
            },
            {
              "name": "response",
              "type": "Response"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_reportCancelation",
          "description": "Reports cancelation by any of pre-request handlers.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 542,
              "column": 2
            },
            "end": {
              "line": 546,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "reason",
              "type": "Error",
              "description": "Error object for the reason."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 36,
          "column": 0
        },
        "end": {
          "line": 555,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ApiElements.ArcRequestLogic",
      "attributes": [
        {
          "name": "handlers-timeout",
          "description": "Number of milliseconds after which the `before-request` event handlers\nwill be cancelled and the request continue without waiting for the\nresult. When set to `0`, `null`, `undefined` or `false` the timeoout\nis not applied and the element waits with the request until\n`continue-request` event is fired.",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 6
            },
            "end": {
              "line": 53,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "variables-disabled",
          "description": "When set variables parsing is not performed.\nActions are eqecuted even when this is set.",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 32
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "url-history-store",
          "description": "Dispatched when request is made. This is handled by `urlhistory-model`\nto store URL history data.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "arc-request-logic"
    }
  ]
}
