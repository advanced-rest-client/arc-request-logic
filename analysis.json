{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`arc-request-logic`\n\nA request logic for Advanced REST Client excluding HTTP transport.\n\n## Styling\n\n`<arc-request-logic>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--arc-request-logic` | Mixin applied to this elment | `{}`",
      "summary": "",
      "path": "arc-request-logic.html",
      "properties": [
        {
          "name": "evalElement",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 2
            },
            "end": {
              "line": 80,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "handlersTimeout",
          "type": "number | null | undefined",
          "description": "Number of milliseconds after which the `before-request` event handlers\nwill be cancelled and the request continue without waiting for the\nresult. When set to `0`, `null`, `undefined` or `false` the timeoout\nis not applied and the element waits with the request until\n`continue-request` event is fired.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "2000"
        },
        {
          "name": "_queue",
          "type": "Object",
          "description": "A map of currently handled requests.\nKeys are requests IDs generated in the request editor.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_attachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 2
            },
            "end": {
              "line": 95,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_detachListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 2
            },
            "end": {
              "line": 102,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_apiRequestHandler",
          "description": "A handler for the `api-request` event. It processes the request\nand sends it to the transport library.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 114,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "processRequest",
          "description": "Processes the request by executing request actions and evaluating\nvariables. When ready it sends the request to the transport.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 2
            },
            "end": {
              "line": 125,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_prepareEventRequest",
          "description": "Prepares a request object to be used to send it with the `before-request`\nevent. This is a \"shallow\" copy of the `request` property. It only creates\na copy of the primitive values of the object. If the `payload` is an\nobject (`FormData` or `File`) then it will be passed by reference instead\nof copying the object.\n\nIt adds `promises` property to the object that is required by the\n`before-request` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 2
            },
            "end": {
              "line": 146,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Copy of the `request` property."
          }
        },
        {
          "name": "_beforeProcessVariables",
          "description": "Before the request object can be sent to any `before-request` handler\nit must be first evaluated by variables evaluator. It is the only way to\nensure that the handler will receive actuall request data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 2
            },
            "end": {
              "line": 164,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_preparePreRequestVariables",
          "description": "Prepares scripts context override values for variables evaluator.\nIf there are actions defined for the `beforeRequest` key then it will\nget list of variables and create the override object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 2
            },
            "end": {
              "line": 192,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Promise resolved to an object of variables\nor undefined if actions not defined."
          }
        },
        {
          "name": "_notifyVariablesChange",
          "description": "Notifies",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 198,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "[type]",
              "description": "[description]"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[description]"
          }
        },
        {
          "name": "_beforeRequest",
          "description": "Handles the before request logic.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 218,
              "column": 2
            },
            "end": {
              "line": 257,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "The request object."
            }
          ]
        },
        {
          "name": "_reportError",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 2
            },
            "end": {
              "line": 274,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id"
            },
            {
              "name": "cause"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeHandlersTimeout",
          "description": "Computes timeout for the before-request event handlers.\nIt reads a `timeout` property from a promise. If set, it returns a highest\nvalue for the timeout or default value defined in the `handlersTimeout`\nproperty. If `handlersTimeout` is falsy or any timeout property equals\nzero (`0`) then this function returns -1 meaning no timeout.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 2
            },
            "end": {
              "line": 308,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "promises",
              "type": "Array",
              "description": "Array of promises returned by the handlers."
            }
          ],
          "return": {
            "type": "Number",
            "desc": "-1 for no timeout or positive number of milliseconds\nfor the `before-request` event to be handled by all handlers."
          }
        },
        {
          "name": "_clearBeforeRequestTimeout",
          "description": "Clears the before-request timeout timer.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 313,
              "column": 2
            },
            "end": {
              "line": 318,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onBeforeRequestTimeout",
          "description": "Called when the `before-request` timeout fired.\nIt continues the request with current values in the `_requestCopy`\nproperty that has been sent with the `before-request` event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 326,
              "column": 2
            },
            "end": {
              "line": 331,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "id",
              "type": "String",
              "description": "Request ID"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_continueRequestHandler",
          "description": "Handler for `continue-request` custom event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 337,
              "column": 2
            },
            "end": {
              "line": 343,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "[type]",
              "description": "[description]"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[description]"
          }
        },
        {
          "name": "continueRequest",
          "description": "It continues the request flow if all promises for the `before-request`\nhas been resolved.\nIt do nothing if current request doesn't expect this event to be handled\n(no timeout set to 0).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 2
            },
            "end": {
              "line": 361,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_continueRequest",
          "description": "Called when before request block finished (whatever the output) and the\nrequest can now be send to the transport library.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 2
            },
            "end": {
              "line": 388,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "The request object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_prepareTransportObject",
          "description": "Creates an immutable request data object to be send to the transport\nlibrary.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 394,
              "column": 2
            },
            "end": {
              "line": 404,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Immutable request object."
          }
        },
        {
          "name": "_resendHandler",
          "description": "Handler for `resend-auth-request` custom event to resend the request\nwhen needed.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 416,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reportHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 2
            },
            "end": {
              "line": 425,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reportResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 427,
              "column": 2
            },
            "end": {
              "line": 442,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request"
            },
            {
              "name": "arcResponse"
            }
          ]
        },
        {
          "name": "_processResponseActions",
          "description": "Executes response action before displaying the results.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 450,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "actions",
              "type": "Array",
              "description": "list of actions to execute"
            },
            {
              "name": "request",
              "type": "Request"
            },
            {
              "name": "response",
              "type": "Response"
            }
          ]
        },
        {
          "name": "_reportCancelation",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 468,
              "column": 2
            },
            "end": {
              "line": 472,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "reason"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 35,
          "column": 0
        },
        "end": {
          "line": 473,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "ApiElements.ArcRequestLogic",
      "attributes": [
        {
          "name": "handlers-timeout",
          "description": "Number of milliseconds after which the `before-request` event handlers\nwill be cancelled and the request continue without waiting for the\nresult. When set to `0`, `null`, `undefined` or `false` the timeoout\nis not applied and the element waits with the request until\n`continue-request` event is fired.",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 7
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "arc-request-logic"
    }
  ]
}
